document.addEventListener("DOMContentLoaded", function () {
    const receiptList = document.getElementById("receipt-list");
    const receiptTypeSelect = document.getElementById("receipt-type");
    const totalExpenseField = document.getElementById("total-amount");
    const totalReceiptsField = document.getElementById("total-receipts-field");
    const adminOptionsSection = document.getElementById("admin-options-section");
    const adminOptionsButton = document.getElementById("admin-options-button");
    const travelDateInput = document.getElementById("travel-date");
    const secondTravelDateInput = document.getElementById("second-travel-date");
    const totalTravelDaysInput = document.getElementById("total-travel-days");
    const disableDietInput = document.getElementById("disable-diet");

    let receipts = {};
    let disableDietCalendar;

    receiptTypeSelect.addEventListener("change", function () {
        const selectedValue = receiptTypeSelect.value;

        if (selectedValue === "taxi") {
            addReceipt("Taksówka");
        } else {
            addReceipt(selectedValue);
        }
    });

    function addReceipt(selectedName) {
        const receiptContainer = document.createElement("div");
        receiptContainer.className = "receipt-container column";
        receiptContainer.id = `receipt-${Object.keys(receipts).length}`;

        const receiptDescription = document.createElement("div");
        receiptDescription.className = "receipt-description";
        receiptDescription.textContent = selectedName;

        const receiptAmount = document.createElement("input");
        receiptAmount.className = "receipt-amount";
        receiptAmount.placeholder = "Kwota paragonu";

        const deleteButton = document.createElement("button");
        deleteButton.className = "delete-button";
        deleteButton.textContent = "Usuń";

        const receiptAmountWrapper = document.createElement("div");
        receiptAmountWrapper.className = "receipt-amount-wrapper";
        receiptAmountWrapper.appendChild(receiptAmount);
        receiptAmountWrapper.appendChild(deleteButton);

        receiptContainer.appendChild(receiptDescription);
        receiptContainer.appendChild(receiptAmountWrapper);

        const receiptItem = document.createElement("li");
        receiptItem.className = "receipt-item";
        receiptItem.appendChild(receiptContainer);

        receiptList.appendChild(receiptItem);

        receipts[receiptContainer.id] = { name: selectedName, amount: receiptAmount };

        receiptAmount.addEventListener("input", updateReceiptsAndTotal);
        updateReceiptsAndTotal();

        deleteButton.addEventListener("click", function () {
            delete receipts[receiptContainer.id];
            receiptItem.remove();
            updateReceiptsAndTotal();
        });
    }

    function updateReceiptsAndTotal() {
        Object.keys(receipts).forEach(function (receiptId, index) {
            const receipt = receipts[receiptId];
            const receiptContainer = document.getElementById(receiptId);

            receiptContainer.querySelector(".receipt-description").textContent = `${index + 1}. ${receipt.name}`;
        });

        let totalAmount = 0;
        Object.keys(receipts).forEach(function (key) {
            const amountValue = parseFloat(receipts[key].amount.value) || 0;
            totalAmount += amountValue;
        });
        totalExpenseField.value = totalAmount.toFixed(2);
        totalReceiptsField.textContent = `Suma paragonów: ${Object.keys(receipts).length}`;
    }

    adminOptionsButton.addEventListener("click", function () {
        adminOptionsSection.style.display = "block";
    });

    function updateTotalTravelDays() {
        const startDate = new Date(travelDateInput.value);
        const endDate = new Date(secondTravelDateInput.value);

        if (startDate && endDate && startDate <= endDate) {
            const timeDifference = endDate - startDate;
            const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24)) + 1;
            totalTravelDaysInput.value = daysDifference;

            // Aktualizacja zakresu dat w kalendarzu "Wyłącz dietę w dniach"
            if (disableDietCalendar) {
                disableDietCalendar.setDate([startDate, endDate]);
            }
        } else {
            totalTravelDaysInput.value = "";
        }
    }

    travelDateInput.addEventListener("change", function () {
        updateTotalTravelDays();
    });

    secondTravelDateInput.addEventListener("change", function () {
        updateTotalTravelDays();
    });

    // Inicjalizacja kalendarza "Wyłącz dietę w dniach"
    disableDietCalendar = flatpickr(disableDietInput, {
        mode: "multiple",
        dateFormat: "Y-m-d",
        onClose: function (selectedDates, dateStr, instance) {
            updateReceiptsAndTotal();
        }
    });

    // Aktualizacja zakresu dat w kalendarzu "Wyłącz dietę w dniach" na podstawie dat podróży
    updateTotalTravelDays();
});

